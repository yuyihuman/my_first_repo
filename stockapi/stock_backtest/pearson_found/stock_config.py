#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
股票配置模块
提供对比股票列表等配置信息
"""

import os
import pandas as pd

def get_all_stocks_list():
    """
    获取所有A股股票列表（过滤掉8和9开头的股票）
    
    Returns:
        list: 股票代码列表
    """
    try:
        # 获取当前脚本所在目录
        current_dir = os.path.dirname(os.path.abspath(__file__))
        
        # 构建stock_data.csv文件路径（在stock_base_info目录下）
        stock_base_info_dir = os.path.join(current_dir, '..', '..', 'stock_base_info')
        csv_file = os.path.join(stock_base_info_dir, 'stock_data.csv')
        
        # 检查文件是否存在
        if not os.path.exists(csv_file):
            print(f"警告：找不到股票数据文件 {csv_file}")
            print("请先运行 stock_base_info/stock_data_fetcher.py 生成股票数据文件")
            return []
        
        # 读取CSV文件
        df = pd.read_csv(csv_file, encoding='utf-8')
        
        # 过滤掉8开头和9开头的股票（北交所等）
        # 确保股票代码是6位数字，然后检查第一位数字
        df['code_6digit'] = df['code'].astype(str).str.zfill(6)
        df = df[~df['code_6digit'].str[0].isin(['8', '9'])]
        
        # 只保留0、3、60开头的股票
        valid_stocks = []
        for _, row in df.iterrows():
            stock_code = str(row['code']).zfill(6)
            if stock_code.startswith('0') or stock_code.startswith('3') or stock_code.startswith('60'):
                valid_stocks.append(stock_code)
        
        return valid_stocks
        
    except Exception as e:
        print(f"获取股票列表时发生错误: {e}")
        return []

def get_comparison_stocks(mode='top10'):
    """
    获取对比股票列表
    
    Args:
        mode: 对比模式 ('top10', 'industry', 'custom', 'self_only', 'all')
    
    Returns:
        list: 股票代码列表
    """
    
    if mode == 'top10':
        # 市值前10的股票代码
        return [
            '000001', '000002', '002001', '002230', '002594', 
            '600000', '600036', '600519', '600887', '601169'
        ]
    
    elif mode == 'industry':
        # 根据行业分类返回股票（这里需要根据具体行业实现）
        # 暂时返回银行股作为示例
        return [
            '000001', '000002', '000063', '000100', '000157',
            '000301', '000338', '000408', '000425', '000538',
            '000568', '000596', '000617', '000625', '000630',
            '000651', '000661', '000708', '000725', '000768',
            '000776', '000786', '000792', '000800', '000807',
            '000858', '000876', '000895', '000938', '000963',
            '000975', '000977', '000983', '000999', '002001',
            '002027', '002028', '002049', '002050', '002074',
            '002129', '002142', '002179', '002180', '002230',
            '002236', '002241', '002252', '002304', '002311',
            '002352', '002371', '002415', '002422', '002459',
            '002460', '002463', '002466', '002475', '002493',
            '300014', '300015', '300033', '300059', '300122',
            '300124', '302132', '600000', '600009', '600010',
            '600011', '600015', '600016', '600018', '600019',
            '600026', '600027', '600028', '600029', '600030',
            '600031', '600036', '600039', '600048', '600050',
            '600061', '600066', '600085', '600089', '600104',
            '600111', '600115', '600150', '600160', '600161',
            '600176', '600183', '600188', '600196', '600219',
            '600233', '600276', '600309', '600332', '600346',
            '600362', '600372', '600377', '600406', '600415',
            '600426', '600436', '600438', '600460', '600482',
            '600489', '600515', '600519', '600547', '600570',
            '600584', '600585', '600588', '600600', '600660',
            '600674', '600690', '600741', '600760', '600795',
            '600803', '600809', '600845', '600875', '600886',
            '600887', '600893', '600900', '600999', '601006',
            '601009', '601088', '601111', '601117', '601166',
            '601169', '601186', '601288', '601318', '601328',
            '601377', '601390', '601398', '601600', '601601',
            '601607', '601618', '601628', '601668', '601688',
            '601699', '601766', '601788', '601808', '601818',
            '601857', '601872', '601877', '601888', '601898',
            '601899', '601919', '601939', '601988', '601998'
        ]
    
    elif mode == 'self_only':
        # 仅自身对比，返回空列表
        return []
    
    elif mode == 'custom':
        # 自定义模式，返回空列表，由调用者提供股票列表
        return []
    
    elif mode == 'all':
        # 所有A股股票模式，返回所有有效的股票代码
        return get_all_stocks_list()
    
    else:
        # 默认返回top10
        return get_comparison_stocks('top10')

def get_stock_industry(stock_code):
    """
    获取股票所属行业
    
    Args:
        stock_code: 股票代码
    
    Returns:
        str: 行业名称
    """
    # 这里应该从数据库或API获取真实的行业信息
    # 暂时返回示例数据
    industry_map = {
        '000001': '银行',
        '000002': '房地产',
        '600036': '银行',
        '600519': '食品饮料',
        '000858': '有色金属',
        '002415': '通信设备'
    }
    
    return industry_map.get(stock_code, '未知行业')